<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Masayuki Ariki]]></title><description><![CDATA[ディープラーニングの勉強やサイト・データベース制作時の備忘録をGatsby.jsとGitHub Pagesで、のーんびりと記録しています。]]></description><link>https://vivo-blog.net/</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 31 Aug 2020 07:06:42 GMT</lastBuildDate><item><title><![CDATA[Zoomにアバターで参加出来るFaceRigの全キャラクターの動画]]></title><description><![CDATA[Zoomのミーティングに参加する際、FaceRigというソフトを使うと、ウェブカメラで自分の姿を表示することなく、代わりのアバターの姿で参加することができます。FaceRigに用意されている全キャラクターの動画です。]]></description><link>https://vivo-blog.net//posts/zoom-avatar</link><guid isPermaLink="false">https://vivo-blog.net//posts/zoom-avatar</guid><pubDate>Sun, 16 Aug 2020 15:05:19 GMT</pubDate><content:encoded>&lt;p&gt;Zoomでミーティングをしたり、ウェビナーに参加したりすることがコロナ禍の影響で多くなってきました。先日は仕事として、ウェビナー開催のサポート業務も行わせていただきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/facerig_avatar.jpg&quot; alt=&quot;facering_avatar.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Zoomを利用する際は、ウェブカメラにて、自分を映して参加しますが、自分の姿を表示せずに、代わりのアバターを表示させて参加することも可能です。&lt;a href=&quot;https://store.steampowered.com/app/274920/FaceRig/?l=japanese&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Steam：FaceRig&lt;/a&gt;　というソフトを購入して、Zoomに連携させるとアバターでの参加が可能になります。ただし、Windowsのみの動作となります。FaceRigを使えば、アバターを表示させるだけでなく、顔の表情、動きをリアルタイムにアバターに反映させることが可能です。&lt;/p&gt;
&lt;p&gt;下記の動画は、FaceRigとZoomを連携させて、Zoomにアバターの全キャラクターを表示させたものです。撮影の際、ウェブカメラで撮影している自分の顔の動き、表情がリアルタイムに反映されるのが分かりました。&lt;/p&gt;
&lt;p&gt;&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 50%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;div&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/RJGhrrB9yDs&quot; style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt;&lt;/div&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;FaceRigは、Windowsで使えると言っても、Windowsのバージョン、PCのスペック、グラフィックカードのスペックは、そこそこ要求されます。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ブログを再開します。ツールをHugoからGatsby.jsに変更しました。]]></title><description><![CDATA[しばらく更新していなかったブログを再開します。以前は、Hugoを使って運用していましたが、Gatsby.jsとGitHub Pagesの構成での運用に変更しました。これまでのブログの運営方法の中で、冗長と思われるフローを改善して、記事作成に注力できる環境を構築しました。]]></description><link>https://vivo-blog.net//posts/blog-restart-from-hugo-to-gatsbyjs</link><guid isPermaLink="false">https://vivo-blog.net//posts/blog-restart-from-hugo-to-gatsbyjs</guid><pubDate>Sat, 15 Aug 2020 15:05:19 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%A5%E5%89%8D%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E9%81%8B%E7%94%A8%E6%96%B9%E6%B3%95&quot;&gt;以前のブログの運用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%94%B9%E5%96%84%E3%81%97%E3%81%9F%E3%81%93%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E9%81%8B%E7%94%A8%E6%96%B9%E6%B3%95&quot;&gt;改善したこのブログの運用方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しばらく更新していなかったブログを再開します。以前は、Hugoを使って運用していましたが、Gatsby.jsとGitHub Pagesの構成での運用に変更しました。これまでのブログの運用方法の中で、冗長と思われるフローを改善して、記事作成に注力できる環境を構築しました。&lt;/p&gt;
&lt;h2 id=&quot;以前のブログの運用方法&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E4%BB%A5%E5%89%8D%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E9%81%8B%E7%94%A8%E6%96%B9%E6%B3%95&quot; aria-label=&quot;以前のブログの運用方法 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;以前のブログの運用方法&lt;/h2&gt;
&lt;p&gt;以前のブログ　&lt;a href=&quot;https://hugo.vivo-one.net/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Leisurely Web Programing&lt;/a&gt;　は静的サイトジェネレーターのHugoを使って運用していました。Goで構築されているHugoは、ビルドが圧倒的に速かったです。しかし、私の運用方法は、まだ改善の余地のあるものでした。その時の運用方法は、自分のパソコンで記事を書き、ビルドをして、生成されたpublicフォルダの中身をレンタルサーバの公開ディレクトリにrsyncでアップロードするというものでした。Bitbucketにて、ソースを管理していましたが、それはただ、ソースの保管をしている意味しかありませんでした。&lt;/p&gt;
&lt;p&gt;ソースがレポジトリサービス上にあるのであれば、そこでビルドとテストをして、デプロイまで出来ることは分かっていたのですが、ブログの更新自体をしなくなって、手付かずの状態でした。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/blog-restart-from-hugo-to-gatsby.jpg&quot; alt=&quot;42-line-bible.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;改善したこのブログの運用方法&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%E6%94%B9%E5%96%84%E3%81%97%E3%81%9F%E3%81%93%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E9%81%8B%E7%94%A8%E6%96%B9%E6%B3%95&quot; aria-label=&quot;改善したこのブログの運用方法 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;改善したこのブログの運用方法&lt;/h2&gt;
&lt;p&gt;ブログを再開するにあたり上記の問題の解決も含めて、ツール、運用環境の検討をしました。HugoとBitbucketの環境でも、問題点を解消できる運用は出来るのですが、他のツール、運用環境を使ってみたいので調査をしました。Gatsby.jsとGitHub Actions、GitHub Pagesで運用することにしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Gatsby&lt;/a&gt;　静的サイトジェネレーター　Reactで作られている&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.co.jp/features/actions&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;GitHub Actions&lt;/a&gt;　GitHubから直接コードをビルド、テスト、デプロイ&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;GitHub Pages&lt;/a&gt;　GitHub リポジトリからGitHub Actionsを経由してホスト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gatsby.jsのスターターキットを使ってサイトを制作しました。自分のパソコンで記事を作成します。Hugoと同じ静的サイトジェネレーターのカテゴリのツールなので、プロジェクト内のファイルを確認すれば、なんとなく、そのファイルの役割は分かりました。&lt;/p&gt;
&lt;p&gt;記事ができたら、GitHubのレポジトリにpushします。pushをきっかけにGitHub Actionsの機能が動作して、GitHub上でコードのビルド、テスト、デプロイが走ります。エラーが発生しても、どこでエラーが発生したのかが追えるように記録されています。GitHub Pagesにデプロイされたサイトが公開されます。記事ファイルをMarkdown形式で書いて、GitHubにpushするだけで、後の工程は、すべて自動化できました。&lt;/p&gt;</content:encoded></item></channel></rss>